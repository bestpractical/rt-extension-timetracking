<%init>

my $time_worked;
if ( $TicketObj->TimeWorked ) {
    $time_worked = {};
    my $transactions = $TicketObj->Transactions;
    $transactions->Limit(
        FIELD           => 'TimeTaken',
        VALUE           => 0,
        OPERATOR        => '!=',
    );

    while ( my $txn = $transactions->Next ) {
        $time_worked->{ $txn->CreatorObj->Name } += $txn->TimeTaken;
    }
}

# The self service interface doesn't support updating time fields.
return unless $session{CurrentUser}->Privileged
          and $session{CurrentUser}->HasRight( Object => $TicketObj, Right => "ModifyTicket" );

my $date_cf = RT::CustomField->new($session{CurrentUser});
$date_cf->LoadByName( Name => 'Worked Date', LookupType => 'RT::Queue-RT::Ticket-RT::Transaction');

# The Mason code below calls directly to SelectDate to avoid printing the
# parenthesized date and save some space. Build the CF name normally
# built in EditCustomField and EditCustomFieldDate.
my $cf_name = 'Object-RT::Transaction--CustomField-'
    . $date_cf->Id . '-Values';

# Default to today and also signal that the field is a date field.
my $today = RT::Date->new($session{CurrentUser});
$today->SetToNow();

</%init>
<div class="add-time form-row">
  <div class="col-3 label input"><&|/l&>Add to time</&> <&|/l&>worked:</&></div>
  <div class="col-auto value">
    <form action="<% RT->Config->Get("WebPath") %>/Ticket/Display.html" method="POST">
      <input type="hidden" name="id" value="<% $TicketObj->id %>">
      <div class="form-row">
        <div class="col-auto">
          <& /Elements/SelectDate, Name => "$cf_name", current => 0, ShowTime => 0, Default => $today->Date( Timezone => 'user') &>
        </div>
        <div class="col-auto">
          <input name="UpdateTimeWorked" type="text" value="<% $ARGS{UpdateTimeWorked} || '' %>" size="5" class="form-control" />
        </div>
        <div class="col-auto">
          <& /Elements/SelectTimeUnits, Name => 'UpdateTimeWorked-TimeUnits', Default => $ARGS{'UpdateTimeWorked-TimeUnits'} || 'minutes' &>
        </div>
        <div class="col-auto">
          <input type="submit" class="btn btn-primary form-control" value="<% loc('Add') %>">
        </div>
      </div>
    </form>
  </div>
</div>
<script>
var timeTrackingStart = Date.now()
var timeTrackerTimer

window.timeSpent = function() {
    // time worked in minutes
    return Math.ceil( (Date.now() - timeTrackingStart) / (1000 * 60) )
}

window.parseUrl = function(url) {
    url = url || ''
    var parts = url.split("?")
    return {href: url, path: parts[0], query: parts.length > 1 ? parts[1] : ''}
}


window.parseQuery = function(str) {
    var params = {}
    str = str || ''
    var parts = str.split("?")
    str = parts.length < 2 ? str : parts[1]
    var pairs = str.split(/[&;]/)  // NB: RT sometimes uses nonstandard param sep!
    pairs.forEach(function(pair) {
        var parts = pair.split("=")
        if (parts.length === 2) {
            var key = decodeURIComponent(parts[0])
            var val = decodeURIComponent(parts[1])
            params[key] = val
        }
    })
    return params
}

jQuery(document).ready(function() {
    var fn = function() {
        var tm = timeSpent()

        // uncomment to have time auto-increment visibly on the Display page
        jQuery('input[name="UpdateTimeWorked"]').val(tm)
        jQuery('select[name="UpdateTimeWorked-TimeUnits"]').val("minutes")

        // loop over the actions menu links and append UpdateTimeWorked value
        jQuery("#li-page-actions li a").each(function() {
            var el = jQuery(this)
            var url = parseUrl(el.attr("href"))
            var qry = parseQuery(url.href)
            qry.UpdateTimeWorked = tm
            el.attr("href", url.path + '?' + jQuery.param(qry))
        })
    }

    // auto-update every 10 seconds
    timeTrackerTimer = setInterval(fn, 10 * 1000)
})
</script>

<%args>
$TicketObj
</%args>
